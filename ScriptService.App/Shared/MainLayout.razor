@using MudBlazor
@using Components
@using ScriptService.App.Services;
@inherits LayoutComponentBase
@inject IDialogService DialogService
@inject ScriptAuthenticationStateProvider stateProvider
<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<ErrorBoundary @ref="errorBoundary">
					<ChildContent>
								<MudLayout>
												<MudAppBar>
																<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
																@if (stateProvider.CurrentUser != null && stateProvider.CurrentUser.IsAuthenticated)
																{
																				<MudText Align="@Align.Right">Hello, @stateProvider.CurrentUser.Email!</MudText>
																				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@logout">
																								Logout
																				</MudButton>
																}
																else
																{
																				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@login">
																								Login
																				</MudButton>
																				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@register">
																								Register
																				</MudButton>
																}
												</MudAppBar>
												<MudDrawer @bind-Open="@_drawerOpen">
																<NavMenu/>
												</MudDrawer>
												<MudMainContent>
																@Body
												</MudMainContent>
								</MudLayout>
				</ChildContent>
				<ErrorContent>
								<MudText>Something went wrong.</MudText>
								<MudButton OnClick="Recover">Reload</MudButton>
				</ErrorContent>
</ErrorBoundary>
@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

				void login()
				{
								var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = true };
								var dialogref = DialogService.Show<LoginComponent>("Login", options);
				}

				void register()
				{
								var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<RegisterComponent>("Register", options);
				}

				async void logout()
				{
								await stateProvider.Logout();
				}

				protected ErrorBoundary errorBoundary = default!;

    protected void Recover() 
    {
        errorBoundary?.Recover();
    }
}
